version: "3"

networks:
  web:
    external: true


services:
  postgres:
    container_name: stackmarket-postgres
    networks:
    - web
    image: postgres:12
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - ./.env

  upload:
    container_name: stackmarket-s3-api
    restart: always
    networks:
    - web
    image: ecumene/stackupload:latest
    env_file:
      - ./stackupload/.env
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.services.upload.loadbalancer.server.port=8081"
      - "traefik.http.routers.upload.middlewares=stripprefix"
      - "traefik.http.routers.upload.rule=(Host(`market.stackcoin.world`) && PathPrefix(`/upload`))"
      - "traefik.http.routers.upload.entrypoints=websecure"
      - "traefik.http.routers.upload.tls.certresolver=myresolver"

  s3-minio:
    container_name: stackmarket-minio
    networks:
    - web
    restart: always
    image: minio/minio:latest
    command: minio server /data
    env_file:
      - ./stackupload/.env
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.services.s3-minio.loadbalancer.server.port=9000"
      - "traefik.http.routers.s3-minio.middlewares=stripprefix"
      - "traefik.http.routers.s3-minio.rule=(Host(`market.stackcoin.world`) && PathPrefix(`/s3`))"
      - "traefik.http.routers.s3-minio.entrypoints=websecure"
      - "traefik.http.routers.s3-minio.tls.certresolver=myresolver"

  frontend:
    container_name: stackmarket-frontend
    networks:
    - web
    restart: always
    image: ecumene/stackmarket:latest
    volumes:
      - "./frontend:/app"
      - "/app/node_modules"
    env_file:
      - ./frontend/.env
    stdin_open: true
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.middlewares=stripprefix"
      - "traefik.http.routers.frontend.rule=(Host(`market.stackcoin.world`) && PathPrefix(`/`))"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"

  graphql-engine:
    container_name: stackmarket-graphql-engine
    networks:
    - web
    restart: always
    image: hasura/graphql-engine:v1.3.1.cli-migrations-v2
    volumes:
      - "./:/hasura"
      - "./migrations:/hasura-migrations"
      - "./metadata:/hasura-metadata"
    depends_on:
      - "postgres"
    env_file:
      - ./.env
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.services.hasura.loadbalancer.server.port=8080"
      - "traefik.http.routers.hasura.rule=(Host(`market.stackcoin.world`) && PathPrefix(`/api`))"
      - "traefik.http.routers.hasura.middlewares=stripprefix"
      - "traefik.http.routers.hasura.entrypoints=websecure"
      - "traefik.http.routers.hasura.tls.certresolver=myresolver"

  traefik:
    image: traefik:v2.2
    restart: always
    networks:
    - web
    command:
    # - "--log.level=DEBUG"
    - "--api.insecure=true"
    - "--providers.docker"
    - "--providers.docker.exposedbydefault=false"
    - "--entrypoints.web.address=:80"
    - "--entrypoints.websecure.address=:443"
    - "--certificatesresolvers.myresolver.acme.email=me@mitchellhynes.com"
    - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
    - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
    - "80:80"
    - "443:443"
    # - "127.0.0.1:8080:8080"
    volumes:
    - "/var/run/docker.sock:/var/run/docker.sock"
    - "./volumes/traefik_letsencrypt_data:/letsencrypt"
    labels:
    - "traefik.http.middlewares.stripprefix.stripprefix.prefixes=/api,/s3,/upload"
    - "traefik.http.middlewares.stripprefix.stripprefix.forceSlash=false"
    - "traefik.enable=true"
    - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
    - "traefik.http.routers.http-catchall.entrypoints=web"
    - "traefik.http.routers.http-catchall.middlewares=redirect-to-https@docker"
    - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

volumes:
  db_data:
